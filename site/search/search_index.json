{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modul Musik-Elektronik Beginn des Moduls ist jeweils im Wintersemester. Das gesamte Modul erstreckt sich \u00fcber zwei Semester. Bitte f\u00fchren Sie die Code-Beispiele in Ihrer SuperCollider-Umgebung aus und evaluieren Sie diese, damit Sie sich schneller mit dem Arbeitsverfahren in SuperCollider vertraut machen k\u00f6nnen.","title":"Modulbeschreibung"},{"location":"#modul-musik-elektronik","text":"Beginn des Moduls ist jeweils im Wintersemester. Das gesamte Modul erstreckt sich \u00fcber zwei Semester. Bitte f\u00fchren Sie die Code-Beispiele in Ihrer SuperCollider-Umgebung aus und evaluieren Sie diese, damit Sie sich schneller mit dem Arbeitsverfahren in SuperCollider vertraut machen k\u00f6nnen.","title":"Modul Musik-Elektronik"},{"location":"daten/","text":"Datenstrukturen Und nat\u00fcrlich k\u00f6nnen wir nicht nur Zahlen Namen geben, sondern jeder Art Datenstruktur. In Supercollider gibt es verschiedene Klassen, die ein Blueprint f\u00fcr die Daten repr\u00e4sentieren: Es gibt z.B. Zahlenklassen Integer und Float. Beispiele f\u00fcr diese Klassen sind 1 (Integer) oder 3.14 (Float). Die Klassen werden durch ihre Eigenschaften voneinander unterschieden. Wir k\u00f6nnen die Eigenschaften der Klassen in folgender Schreibweise abfragen: Klasse.Eigenschaft Beispiel: Die Klasse Integer (und viele andere Objekte in SC) besitzt u.a. die Eigenschaft class , die angibt zu welcher Klasse eine Integer-Instanz geh\u00f6rt: 1.class Auch der Quadratwurzel einer Zahl k\u00f6nnen wir durch die Eigenschaft sqrt (f\u00fcr square root) abfragen: 4.sqrt Achten Sie darauf, dass die sqrt -Eigenschaft nur f\u00fcr Zahlen gilt! Wir k\u00f6nnen z.B. diese Eigenschaft bei einem String (eine Zeichenkette eingeschlossen zwischen zwei Anf\u00fchrungszeichen) nicht abfragen, da diese Eigenschaft dort keinen Sinn ergibt. SuperCollider wird uns in dem Fall einen Fehler ausgeben: \"Musik Elektronik\".sqrt Die class -Eigenschaft hingegen kann sinnvollerweise auch auf Strings (und jedes andere Objekt) angewendet werden: \"Musik Elektronik\".class Hier sind einige Klassen (auf der Sprach-Ebene), mit denen wir sehr viel arbeiten werden: Integer ('1') Float ('3.14') String ('\"Musik Elektronik\"') Array ('[1, 2, 3, 4]') Boolean ('true') \u00dcbung Schreiben Sie f\u00fcr jede der folgenden Aufgaben eine Zeile Code: Summe der Zahlen 2.4, 45, 0.234 Produkt der oben genannten Zahlen Benutzen Sie die size -Eigenschaft, um herauszufinden, aus wie vielen Zeichen der folgende String besteht: \"1k2k3ja98d4nj281jkswe8s0dnmwer8c7q23ij18\" Die size -Eigenschaft funktioniert auch f\u00fcr Arrays. Finden Sie die Anzahl der Objekte in dem folgenden Array heraus: [1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 5, 4, 3, 2] Benutzen Sie die sum -Eigenschaft f\u00fcr Arrays, um die Summe aller Zahlen im obigen Array zu berechnen.","title":"Datenstrukturen"},{"location":"daten/#datenstrukturen","text":"Und nat\u00fcrlich k\u00f6nnen wir nicht nur Zahlen Namen geben, sondern jeder Art Datenstruktur. In Supercollider gibt es verschiedene Klassen, die ein Blueprint f\u00fcr die Daten repr\u00e4sentieren: Es gibt z.B. Zahlenklassen Integer und Float. Beispiele f\u00fcr diese Klassen sind 1 (Integer) oder 3.14 (Float). Die Klassen werden durch ihre Eigenschaften voneinander unterschieden. Wir k\u00f6nnen die Eigenschaften der Klassen in folgender Schreibweise abfragen: Klasse.Eigenschaft Beispiel: Die Klasse Integer (und viele andere Objekte in SC) besitzt u.a. die Eigenschaft class , die angibt zu welcher Klasse eine Integer-Instanz geh\u00f6rt: 1.class Auch der Quadratwurzel einer Zahl k\u00f6nnen wir durch die Eigenschaft sqrt (f\u00fcr square root) abfragen: 4.sqrt Achten Sie darauf, dass die sqrt -Eigenschaft nur f\u00fcr Zahlen gilt! Wir k\u00f6nnen z.B. diese Eigenschaft bei einem String (eine Zeichenkette eingeschlossen zwischen zwei Anf\u00fchrungszeichen) nicht abfragen, da diese Eigenschaft dort keinen Sinn ergibt. SuperCollider wird uns in dem Fall einen Fehler ausgeben: \"Musik Elektronik\".sqrt Die class -Eigenschaft hingegen kann sinnvollerweise auch auf Strings (und jedes andere Objekt) angewendet werden: \"Musik Elektronik\".class Hier sind einige Klassen (auf der Sprach-Ebene), mit denen wir sehr viel arbeiten werden: Integer ('1') Float ('3.14') String ('\"Musik Elektronik\"') Array ('[1, 2, 3, 4]') Boolean ('true')","title":"Datenstrukturen"},{"location":"daten/#ubung","text":"Schreiben Sie f\u00fcr jede der folgenden Aufgaben eine Zeile Code: Summe der Zahlen 2.4, 45, 0.234 Produkt der oben genannten Zahlen Benutzen Sie die size -Eigenschaft, um herauszufinden, aus wie vielen Zeichen der folgende String besteht: \"1k2k3ja98d4nj281jkswe8s0dnmwer8c7q23ij18\" Die size -Eigenschaft funktioniert auch f\u00fcr Arrays. Finden Sie die Anzahl der Objekte in dem folgenden Array heraus: [1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 5, 4, 3, 2] Benutzen Sie die sum -Eigenschaft f\u00fcr Arrays, um die Summe aller Zahlen im obigen Array zu berechnen.","title":"\u00dcbung"},{"location":"kontakt/","text":"Kontakt Anmeldung f\u00fcr das Seminar sowie weitere Fragen bitte an folgende Adresse: amiratwork22 [at] gmail [dot] com","title":"Kontakt"},{"location":"kontakt/#kontakt","text":"Anmeldung f\u00fcr das Seminar sowie weitere Fragen bitte an folgende Adresse: amiratwork22 [at] gmail [dot] com","title":"Kontakt"},{"location":"namen/","text":"Namengebung In der Programmierung (f\u00fcr uns Menschen) ist es allgemein einfacher, sich Namen anstelle von komplexen Daten zu merken. Daher k\u00f6nnen wir in unserem Code Namen f\u00fcr unsere Daten zuweisen. Es gibt drei M\u00f6glichkeiten Namen zu definieren: Einzellige Namen Hierf\u00fcr verwenden wir einzelne Kleinbuchstaben, wie folgt: a = 123 Es gibt jedoch eine Ausnahme: \"s\" ist bereits von SuperCollider (SC) reserviert und verweist auf den aktuellen Server. Daher sollte \"s\" nicht \u00fcberschrieben werden. Lokale Namen Alternativ k\u00f6nnen wir vollst\u00e4ndige Namen verwenden. Es ist wichtig, dass diese mit Kleinbuchstaben beginnen. F\u00fcr diese Art von Namen m\u00fcssen sie mit \"var\" deklariert und in einem Code-Block stehen. Au\u00dferhalb der geschweiften Klammern haben diese Namen keine Bedeutung. Code-Bl\u00f6cke sind alle Teile, die sich zwischen zwei geschweiften Klammern befinden: ( var name = 123; name = name + 1; name ) Globale Namen Die letzte Art der Namenszuweisung erfolgt, indem wir vor den Namen eine Tilde setzen. Dadurch m\u00fcssen diese Namen nicht in einem Code-Block eingeschlossen sein und k\u00f6nnen \u00fcberall im Code verwendet werden. Beachten Sie, dass auch hier die Namen mit Kleinbuchstaben beginnen m\u00fcssen: ~drei = 3; ( ~vier = 4; ) ~sieben = ~drei + ~vier; Achtung: Wenn Sie mit Codebl\u00f6cken arbeiten, achten Sie darauf, dass das Ergebnis eines Codeblocks das ist, was in der letzten Zeile des Blocks steht!","title":"Namengebung"},{"location":"namen/#namengebung","text":"In der Programmierung (f\u00fcr uns Menschen) ist es allgemein einfacher, sich Namen anstelle von komplexen Daten zu merken. Daher k\u00f6nnen wir in unserem Code Namen f\u00fcr unsere Daten zuweisen. Es gibt drei M\u00f6glichkeiten Namen zu definieren:","title":"Namengebung"},{"location":"namen/#einzellige-namen","text":"Hierf\u00fcr verwenden wir einzelne Kleinbuchstaben, wie folgt: a = 123 Es gibt jedoch eine Ausnahme: \"s\" ist bereits von SuperCollider (SC) reserviert und verweist auf den aktuellen Server. Daher sollte \"s\" nicht \u00fcberschrieben werden.","title":"Einzellige Namen"},{"location":"namen/#lokale-namen","text":"Alternativ k\u00f6nnen wir vollst\u00e4ndige Namen verwenden. Es ist wichtig, dass diese mit Kleinbuchstaben beginnen. F\u00fcr diese Art von Namen m\u00fcssen sie mit \"var\" deklariert und in einem Code-Block stehen. Au\u00dferhalb der geschweiften Klammern haben diese Namen keine Bedeutung. Code-Bl\u00f6cke sind alle Teile, die sich zwischen zwei geschweiften Klammern befinden: ( var name = 123; name = name + 1; name )","title":"Lokale Namen"},{"location":"namen/#globale-namen","text":"Die letzte Art der Namenszuweisung erfolgt, indem wir vor den Namen eine Tilde setzen. Dadurch m\u00fcssen diese Namen nicht in einem Code-Block eingeschlossen sein und k\u00f6nnen \u00fcberall im Code verwendet werden. Beachten Sie, dass auch hier die Namen mit Kleinbuchstaben beginnen m\u00fcssen: ~drei = 3; ( ~vier = 4; ) ~sieben = ~drei + ~vier; Achtung: Wenn Sie mit Codebl\u00f6cken arbeiten, achten Sie darauf, dass das Ergebnis eines Codeblocks das ist, was in der letzten Zeile des Blocks steht!","title":"Globale Namen"}]}